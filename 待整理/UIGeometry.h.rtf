{\rtf1\ansi\ansicpg936\cocoartf1404\cocoasubrtf340
{\fonttbl\f0\fnil\fcharset0 Menlo-Regular;}
{\colortbl;\red255\green255\blue255;\red29\green133\blue25;\red110\green32\blue13;\red186\green0\blue17;
\red100\green56\blue32;\red180\green0\blue98;\red92\green38\blue153;\red0\green11\blue255;\red46\green13\blue110;
\red77\green0\blue158;}
\paperw11900\paperh16840\margl1440\margr1440\vieww14000\viewh10200\viewkind0
\deftab674
\pard\tx674\pardeftab674\pardirnatural\partightenfactor0

\f0\fs28 \cf2 \CocoaLigature0 //\cf0 \
\cf2 //  UIGeometry.h\cf0 \
\cf2 //  UIKit\cf0 \
\cf2 //\cf0 \
\cf2 //  Copyright (c) 2005-2015 Apple Inc. All rights reserved.\cf0 \
\cf2 //\cf0 \
\
\
\cf3 #import \cf4 <Foundation/Foundation.h>\cf3 \
#import \cf4 <CoreGraphics/CoreGraphics.h>\cf3 \
#import \cf4 <UIKit/UIKitDefines.h>\cf3 \
\cf0 \
\cf5 NS_ASSUME_NONNULL_BEGIN\cf0 \
\
\cf6 typedef\cf0  \cf6 struct\cf0  UIEdgeInsets \{\
    \cf7 CGFloat\cf0  top, left, bottom, right;  \cf2 // specify amount to inset (positive) for each of the edges. values can be negative to 'outset'\cf0 \
\} UIEdgeInsets;\
\
\cf6 typedef\cf0  \cf6 struct\cf0  UIOffset \{\
    \cf7 CGFloat\cf0  horizontal, vertical; \cf2 // specify amount to offset a position, positive for right or down, negative for left or up\cf0 \
\} UIOffset;\
\
\cf6 typedef\cf0  \cf6 NS_OPTIONS\cf0 (NSUInteger, UIRectEdge) \{\
    UIRectEdgeNone   = \cf8 0\cf0 ,\
    UIRectEdgeTop    = \cf8 1\cf0  << \cf8 0\cf0 ,\
    UIRectEdgeLeft   = \cf8 1\cf0  << \cf8 1\cf0 ,\
    UIRectEdgeBottom = \cf8 1\cf0  << \cf8 2\cf0 ,\
    UIRectEdgeRight  = \cf8 1\cf0  << \cf8 3\cf0 ,\
    UIRectEdgeAll    = \cf9 UIRectEdgeTop\cf0  | \cf9 UIRectEdgeLeft\cf0  | \cf9 UIRectEdgeBottom\cf0  | \cf9 UIRectEdgeRight\cf0 \
\} \cf5 NS_ENUM_AVAILABLE_IOS\cf0 (\cf8 7\cf0 _0);\
\
\cf5 UIKIT_STATIC_INLINE\cf0  \cf7 UIEdgeInsets\cf0  UIEdgeInsetsMake(\cf7 CGFloat\cf0  top, \cf7 CGFloat\cf0  left, \cf7 CGFloat\cf0  bottom, \cf7 CGFloat\cf0  right) \{\
    \cf7 UIEdgeInsets\cf0  insets = \{top, left, bottom, right\};\
    \cf6 return\cf0  insets;\
\}\
\
\cf5 UIKIT_STATIC_INLINE\cf0  \cf7 CGRect\cf0  UIEdgeInsetsInsetRect(\cf7 CGRect\cf0  rect, \cf7 UIEdgeInsets\cf0  insets) \{\
    rect.\cf7 origin\cf0 .\cf7 x\cf0     += insets.\cf7 left\cf0 ;\
    rect.\cf7 origin\cf0 .\cf7 y\cf0     += insets.\cf7 top\cf0 ;\
    rect.\cf7 size\cf0 .\cf7 width\cf0   -= (insets.\cf7 left\cf0  + insets.\cf7 right\cf0 );\
    rect.\cf7 size\cf0 .\cf7 height\cf0  -= (insets.\cf7 top\cf0   + insets.\cf7 bottom\cf0 );\
    \cf6 return\cf0  rect;\
\}\
\
\cf5 UIKIT_STATIC_INLINE\cf0  \cf7 UIOffset\cf0  UIOffsetMake(\cf7 CGFloat\cf0  horizontal, \cf7 CGFloat\cf0  vertical) \{\
    \cf7 UIOffset\cf0  offset = \{horizontal, vertical\};\
    \cf6 return\cf0  offset;\
\}\
\
\cf5 UIKIT_STATIC_INLINE\cf0  \cf6 BOOL\cf0  UIEdgeInsetsEqualToEdgeInsets(\cf7 UIEdgeInsets\cf0  insets1, \cf7 UIEdgeInsets\cf0  insets2) \{\
    \cf6 return\cf0  insets1.\cf7 left\cf0  == insets2.\cf7 left\cf0  && insets1.\cf7 top\cf0  == insets2.\cf7 top\cf0  && insets1.\cf7 right\cf0  == insets2.\cf7 right\cf0  && insets1.\cf7 bottom\cf0  == insets2.\cf7 bottom\cf0 ;\
\}\
\
\cf5 UIKIT_STATIC_INLINE\cf0  \cf6 BOOL\cf0  UIOffsetEqualToOffset(\cf7 UIOffset\cf0  offset1, \cf7 UIOffset\cf0  offset2) \{\
    \cf6 return\cf0  offset1.\cf7 horizontal\cf0  == offset2.\cf7 horizontal\cf0  && offset1.\cf7 vertical\cf0  == offset2.\cf7 vertical\cf0 ;\
\}\
\
\cf5 UIKIT_EXTERN\cf0  \cf6 const\cf0  \cf7 UIEdgeInsets\cf0  UIEdgeInsetsZero;\
\cf5 UIKIT_EXTERN\cf0  \cf6 const\cf0  \cf7 UIOffset\cf0  UIOffsetZero;\
\
\
\
\
\
\
\cf5 UIKIT_EXTERN\cf0  \cf10 NSString\cf0  *NSStringFromCGPoint(\cf7 CGPoint\cf0  point);\
\cf5 UIKIT_EXTERN\cf0  \cf10 NSString\cf0  *NSStringFromCGVector(\cf7 CGVector\cf0  vector);\
\cf5 UIKIT_EXTERN\cf0  \cf10 NSString\cf0  *NSStringFromCGSize(\cf7 CGSize\cf0  size);\
\cf5 UIKIT_EXTERN\cf0  \cf10 NSString\cf0  *NSStringFromCGRect(\cf7 CGRect\cf0  rect);\
\cf5 UIKIT_EXTERN\cf0  \cf10 NSString\cf0  *NSStringFromCGAffineTransform(\cf7 CGAffineTransform\cf0  transform);\
\cf5 UIKIT_EXTERN\cf0  \cf10 NSString\cf0  *NSStringFromUIEdgeInsets(\cf7 UIEdgeInsets\cf0  insets);\
\cf5 UIKIT_EXTERN\cf0  \cf10 NSString\cf0  *NSStringFromUIOffset(\cf7 UIOffset\cf0  offset);\
\
\cf5 UIKIT_EXTERN\cf0  \cf7 CGPoint\cf0  CGPointFromString(\cf10 NSString\cf0  *string);\
\cf5 UIKIT_EXTERN\cf0  \cf7 CGVector\cf0  CGVectorFromString(\cf10 NSString\cf0  *string);\
\cf5 UIKIT_EXTERN\cf0  \cf7 CGSize\cf0  CGSizeFromString(\cf10 NSString\cf0  *string);\
\cf5 UIKIT_EXTERN\cf0  \cf7 CGRect\cf0  CGRectFromString(\cf10 NSString\cf0  *string);\
\cf5 UIKIT_EXTERN\cf0  \cf7 CGAffineTransform\cf0  CGAffineTransformFromString(\cf10 NSString\cf0  *string);\
\cf5 UIKIT_EXTERN\cf0  \cf7 UIEdgeInsets\cf0  UIEdgeInsetsFromString(\cf10 NSString\cf0  *string);\
\cf5 UIKIT_EXTERN\cf0  \cf7 UIOffset\cf0  UIOffsetFromString(\cf10 NSString\cf0  *string);\
\
\
\
\
\
\
\cf6 @interface\cf0  NSValue (NSValueUIGeometryExtensions)\
\
+ (\cf10 NSValue\cf0  *)valueWithCGPoint:(\cf7 CGPoint\cf0 )point;\
+ (\cf10 NSValue\cf0  *)valueWithCGVector:(\cf7 CGVector\cf0 )vector;\
+ (\cf10 NSValue\cf0  *)valueWithCGSize:(\cf7 CGSize\cf0 )size;\
+ (\cf10 NSValue\cf0  *)valueWithCGRect:(\cf7 CGRect\cf0 )rect;\
+ (\cf10 NSValue\cf0  *)valueWithCGAffineTransform:(\cf7 CGAffineTransform\cf0 )transform;\
+ (\cf10 NSValue\cf0  *)valueWithUIEdgeInsets:(\cf7 UIEdgeInsets\cf0 )insets;\
+ (\cf10 NSValue\cf0  *)valueWithUIOffset:(\cf7 UIOffset\cf0 )insets \cf5 NS_AVAILABLE_IOS\cf0 (\cf8 5\cf0 _0);\
\
- (\cf7 CGPoint\cf0 )CGPointValue;\
- (\cf7 CGVector\cf0 )CGVectorValue;\
- (\cf7 CGSize\cf0 )CGSizeValue;\
- (\cf7 CGRect\cf0 )CGRectValue;\
- (\cf7 CGAffineTransform\cf0 )CGAffineTransformValue;\
- (\cf7 UIEdgeInsets\cf0 )UIEdgeInsetsValue;\
- (\cf7 UIOffset\cf0 )UIOffsetValue \cf5 NS_AVAILABLE_IOS\cf0 (\cf8 5\cf0 _0);\
\
\cf6 @end\cf0 \
    \
\
\
\
\
\cf6 @interface\cf0  NSCoder (UIGeometryKeyedCoding)\
\
- (\cf6 void\cf0 )encodeCGPoint:(\cf7 CGPoint\cf0 )point forKey:(\cf10 NSString\cf0  *)key;\
- (\cf6 void\cf0 )encodeCGVector:(\cf7 CGVector\cf0 )vector forKey:(\cf10 NSString\cf0  *)key;\
- (\cf6 void\cf0 )encodeCGSize:(\cf7 CGSize\cf0 )size forKey:(\cf10 NSString\cf0  *)key;\
- (\cf6 void\cf0 )encodeCGRect:(\cf7 CGRect\cf0 )rect forKey:(\cf10 NSString\cf0  *)key;\
- (\cf6 void\cf0 )encodeCGAffineTransform:(\cf7 CGAffineTransform\cf0 )transform forKey:(\cf10 NSString\cf0  *)key;\
- (\cf6 void\cf0 )encodeUIEdgeInsets:(\cf7 UIEdgeInsets\cf0 )insets forKey:(\cf10 NSString\cf0  *)key;\
- (\cf6 void\cf0 )encodeUIOffset:(\cf7 UIOffset\cf0 )offset forKey:(\cf10 NSString\cf0  *)key \cf5 NS_AVAILABLE_IOS\cf0 (\cf8 5\cf0 _0);\
\
- (\cf7 CGPoint\cf0 )decodeCGPointForKey:(\cf10 NSString\cf0  *)key;\
- (\cf7 CGVector\cf0 )decodeCGVectorForKey:(\cf10 NSString\cf0  *)key;\
- (\cf7 CGSize\cf0 )decodeCGSizeForKey:(\cf10 NSString\cf0  *)key;\
- (\cf7 CGRect\cf0 )decodeCGRectForKey:(\cf10 NSString\cf0  *)key;\
- (\cf7 CGAffineTransform\cf0 )decodeCGAffineTransformForKey:(\cf10 NSString\cf0  *)key;\
- (\cf7 UIEdgeInsets\cf0 )decodeUIEdgeInsetsForKey:(\cf10 NSString\cf0  *)key;\
- (\cf7 UIOffset\cf0 )decodeUIOffsetForKey:(\cf10 NSString\cf0  *)key \cf5 NS_AVAILABLE_IOS\cf0 (\cf8 5\cf0 _0);\
\
\cf6 @end\cf0 \
\
\cf5 NS_ASSUME_NONNULL_END\cf0 \
}